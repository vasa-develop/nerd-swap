{"version":3,"sources":["redux/constants.js","redux/reducers/app.js","redux/reducers/index.js","redux/store/index.js","components/Nav/index.js","redux/actions/login.js","utils/helper.js","redux/actions/trade.js","components/NerdSwap/index.js","components/Home/index.js","components/EthSwap/index.js","components/Footer/index.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","user","trx","todoList","loaded","combineReducers","app","state","action","type","types","payload","middlewares","thunk","Store","createStore","RootReducer","applyMiddleware","window","store","Nav","to","target","href","login","dispatch","a","ethereum","enable","getABI","name","nft","market","getErc20FromNft","address","getMarketId","indexOf","isEthBasedMarket","includes","getErc20Address","getMarketAddress","isInputERC1155","fromNft","web3","Web3","currentProvider","CAS","getBuySignature","toNft","toIds","toAmounts","getBuyMethod","buyMarket","getTotalPriceEstimate","buyData","eth","Contract","methods","estimateBatchAssetPriceInEth","call","estimateBatchAssetPriceInErc20","getSwapParameters","sellMarket","parseInt","toString","estimateDetails","totalEstimate","i","generateSellDetails","sellParameters","sellParams","abi","encodeParameters","encodeFunctionCall","inputs","generateSwapDetails","swapToETH","swapParameters","generateEstimateData","details","sig","params","generateBuyDetails","recipient","buyParams","connect","executeTrade","fromIds","fromAmounts","swapExchange","split","map","changeIn","uniswapExchange","isFromERC1155","sellData","swapData","addrs","data","console","log","safeBatchTransferFrom","send","givenProvider","selectedAddress","safeTransferFrom","tx","props","style","className","forHtml","id","value","placeholder","onClick","document","getElementById","transactionHash","color","Home","executeFromNftTrade","Footer","App","path","NerdSwap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d32d4ac6.chunk.js","sourcesContent":["export default {\n  LOGIN: \"LOGIN\",\n  ADD_TODO: \"ADD_TODO\",\n  GET_TODOS: \"GET_TODOS\",\n  UPDATE_TODOS: \"UPDATE_TODOS\",\n  TRADE: \"TRADE\"\n};\n","import types from \"../constants\";\n\nconst initialState = {\n  user: '',\n  trx: {},\n  todoList: [],\n  loaded: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case types.LOGIN:\n      return { ...state, user: action.payload[0] };\n    case types.ADD_TODO:\n      return { ...state, todoList: [...state.todoList, action.payload] };\n    case types.GET_TODOS:\n      return {\n        ...state,\n        todoList: [...state.todoList, ...action.payload],\n        loaded: true,\n      };\n    case types.UPDATE_TODOS:\n      return {\n        ...state,\n        todoList: action.payload,\n      };\n    case types.TRADE:\n      return {\n        ...state,\n        trx: action.payload\n      }      \n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport app from \"./app\";\n\nexport default combineReducers({\n  app: app,\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport RootReducer from \"../reducers\";\n\nconst middlewares = [thunk];\n\nconst intialState = {};\n\nconst Store = createStore(\n  RootReducer,\n  intialState,\n  applyMiddleware(...middlewares)\n);\nwindow.store = Store;\nexport default Store;\n","import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n    return (\n      <Fragment>\n        <hr />\n        <p>\n          <Link to=\"/\">Markets</Link> {' | '}\n          <Link to=\"/nerd-swap\">Swap</Link> {' | '}  \n          <Link to=\"/eth-swap\">Eth/Erc20/NFT Swap</Link> {' | '}  \n          <a target=\"_blank\" href=\"https://github.com/vasa-develop/cross-asset-swap\">GitHub</a>\n        </p>\n        <hr />\n        </Fragment>\n    )\n}\n\nexport default Nav;","import types from \"../constants\";\n\nexport const login = () => async (dispatch) => {\n  \n  var user = await window.ethereum.enable()\n\n  dispatch({\n    type: types.LOGIN,\n    payload: user,\n  });\n};\n","import aahNFT from './abis/aahNFT.json'\nimport chubbiesNFT from './abis/chubbiesNFT.json'\nimport dokiNFT from './abis/dokiNFT.json'\nimport ganPunksNFT from './abis/ganPunksNFT.json'\nimport hashmaskNFT from './abis/hashmaskNFT.json'\nimport memeNFT from './abis/memeNFT.json'\nimport niftyDudesNFT from './abis/niftyDudesNFT.json'\nimport nodeRunnersNFT from './abis/nodeRunnersNFT.json'\nimport ropeNFT from './abis/ropeNFT.json'\nimport wrapperMoonCatNFT from './abis/wrapperMoonCatNFT.json'\nimport market from './abis/market.json'\nimport nft from './abis/nft.json'\n\nexport const getABI = (name) => { \n    switch (name) {\n        case 'nft':\n            return nft;\n        case 'market':\n            return market;\n    }\n}\n\nexport const getErc20FromNft = (address) => { \n    switch (address) {\n        case '0x274E21d314A915d1504060d4351DdE05d4dC031e':\n            return \"0x7a911C71144f4d5a00E4216b1c5b12D9571E9336\";\n        case '0x1DB61FC42a843baD4D91A2D788789ea4055B8613':\n            return \"0x48Bef6bd05bD23b5e6800Cf0406e524b517af250\";\n        case '0x7CdC0421469398e0F3aA8890693d86c840Ac8931':\n            return \"0x22C4AD011Cce6a398B15503e0aB64286568933Ed\";\n        case '0x31385d3520bCED94f77AaE104b406994D8F2168C':\n            return \"0xcCcBF11AC3030ee8CD7a04CFE15a3718df6dD030\";\n        case '0xC2C747E0F7004F9E8817Db2ca4997657a7746928':\n            return \"0xc2BdE1A2fA26890c8E6AcB10C91CC6D9c11F4a73\";\n        case '0xe4605d46Fd0B3f8329d936a8b258D69276cBa264':\n            return \"0x60ACD58d00b2BcC9a8924fdaa54A2F7C0793B3b2\";\n        case '0x892555E75350E11f2058d086C72b9C94C9493d72':\n            return \"0x2313E39841fb3809dA0Ff6249c2067ca84795846\";\n        case '0x89eE76cC25Fcbf1714ed575FAa6A10202B71c26A':\n            return \"0x303Af77Cf2774AABff12462C110A0CCf971D7DbE\";\n        case '0xDb68Df0e86Bc7C6176E6a2255a5365f51113BCe8':\n            return \"0xB3CDC594D8C8e8152d99F162cF8f9eDFdc0A80A2\";\n        case '0x7C40c393DC0f283F318791d746d894DdD3693572':\n            return \"0xf961A1Fa7C781Ecd23689fE1d0B7f3B6cBB2f972\";\n    }    \n} \n\nexport const getNftAddress = (name) => { \n    switch (name) {\n        case 'aah':\n            return \"0x274E21d314A915d1504060d4351DdE05d4dC031e\";\n        case 'chubbies':\n            return \"0x1DB61FC42a843baD4D91A2D788789ea4055B8613\";\n        case 'doki':\n            return \"0x7CdC0421469398e0F3aA8890693d86c840Ac8931\";\n        case 'ganPunks':\n            return \"0x31385d3520bCED94f77AaE104b406994D8F2168C\";\n        case 'hashmask':\n            return \"0xC2C747E0F7004F9E8817Db2ca4997657a7746928\";\n        case 'meme':\n            return \"0xe4605d46Fd0B3f8329d936a8b258D69276cBa264\";\n        case 'niftyDudes':\n            return \"0x892555E75350E11f2058d086C72b9C94C9493d72\";\n        case 'nodeRunners':\n            return \"0x89eE76cC25Fcbf1714ed575FAa6A10202B71c26A\";\n        case 'rope':\n            return \"0xDb68Df0e86Bc7C6176E6a2255a5365f51113BCe8\";\n        case 'mooncats':\n            return \"0x7C40c393DC0f283F318791d746d894DdD3693572\";\n    }\n}\n\nexport const getMarketId = (name) => { \n    let markets = [\n        'nft20',\n        'axie',\n        'cryptokitty',\n        'cryptopunk',\n        'decentraland',\n        'eulerbeats',\n        'knownorigin',\n        'mooncats',\n        'superrare',\n        'defiville',\n        'rarible',\n        'makersplace',\n        'uniqueone',\n        'opensea',\n        'asyncart'\n    ]\n    return markets.indexOf(name);\n}\n\nexport const getExchangeId = (name) => { \n    let exchanges = [\n        'uniswap'\n    ]\n    return exchanges.indexOf(name);\n}\n\nexport const isEthBasedMarket = (name) => { \n    let ethBasedMarkets = ['axie', 'cryptokitty', 'cryptopunk', 'eulerbeats', 'knownorigin', 'mooncats', 'superrare', 'defiville', 'rarible', 'makersplace', 'uniqueone', 'opensea', 'asyncart']\n    let erc20BasedMarkets = ['nft20', 'decentraland']\n    return ethBasedMarkets.includes(name)\n}\n\nexport const getErc20Address = (name) => { \n    switch (name) {\n        case 'aah':\n            return \"0x7a911C71144f4d5a00E4216b1c5b12D9571E9336\";\n        case 'chubbies':\n            return \"0x48Bef6bd05bD23b5e6800Cf0406e524b517af250\";\n        case 'doki':\n            return \"0x22C4AD011Cce6a398B15503e0aB64286568933Ed\";\n        case 'ganPunks':\n            return \"0xcCcBF11AC3030ee8CD7a04CFE15a3718df6dD030\";\n        case 'hashmask':\n            return \"0xc2BdE1A2fA26890c8E6AcB10C91CC6D9c11F4a73\";\n        case 'meme':\n            return \"0x60ACD58d00b2BcC9a8924fdaa54A2F7C0793B3b2\";\n        case 'niftyDudes':\n            return \"0x2313E39841fb3809dA0Ff6249c2067ca84795846\";\n        case 'nodeRunners':\n            return \"0x303Af77Cf2774AABff12462C110A0CCf971D7DbE\";\n        case 'rope':\n            return \"0xB3CDC594D8C8e8152d99F162cF8f9eDFdc0A80A2\";\n        case 'mooncats':\n            return \"0xf961A1Fa7C781Ecd23689fE1d0B7f3B6cBB2f972\";\n        case 'decentraland':\n            return \"0x1E0CD9506d465937E9d6754e76Cd389A8bD90FBf\";\n        case 'FRAMERGENCE':\n            return '0x84F830A9203223D672d6592481f4A027e9Cf934E';\n        case 'EDITIONAL':\n            return '0x34a558Df12aEAc5f5029eECCeFb549368Ce168AF';\n    }   \n}\n\nexport const getMarketAddress = (name) => {\n    switch (name) {\n        case 'nft20':\n            return '0x064C9c5Fe72ab6acdc0d220050d519AfAa59B9bB';\n        case 'axie':\n            return '0xdCAEE44ED2965d5615a9A206f6f3ab8fb90Fcd62';\n        case 'cryptokitty':\n            return '0x7207d099EBAb7cF9DE49A29739Dd0C628dDCf48D';\n        case 'cryptopunk':\n            return '0x03DcA7d783175Ba9D97cc41D20e4c266C7abb881';\n        case 'decentraland':\n            return '0x0545405a2c208d3E2c50c71cF0B6B9a72A021b49';\n        case 'eulerbeats':\n            return '0x2428aE09b453692A667b8A8dee1Fc4082f44Ad05';\n        case 'knownorigin':\n            return '0xCBc360534370F1d5465e531236027f0610E067bf';\n        case 'mooncats':\n            return '0xdAD871D701Da0D98993Eaa27Ce9c2e51D8912B87';\n        case 'superrare':\n            return '0x99f2B1FF838dA5Ee5062358b4Fa2c763C93Fe474';\n        case 'defiville':\n            return '0xE43C045bb9BC0793b384B3517239937b4eD7746C';\n        case 'rarible':\n            return '0xa695C98cfD621FF2a50233eFE9Eed5D5bde1Fc78';\n        case 'makersplace':\n            return '0xc4B3a11f29971e757b1627586fa8C5fFE7bCC660';\n        case 'uniqueone':\n            return '0xf28CdFB8d7De08A4C51C7D2171122ccDaAE37DaF';\n        case 'opensea':\n            return '0xB32EaF1153a0f0b12361f0A9563B0178e98935E4';\n        case 'asyncart':\n            return '0x827839e1cd15ec75a1adcea0d1dcc49d3f3c8cd0';\n    }\n}\n\nexport const isInputERC1155 = (fromNft) => { \n    let erc1155s = [\"0x274E21d314A915d1504060d4351DdE05d4dC031e\", \"0x7CdC0421469398e0F3aA8890693d86c840Ac8931\", \"0xe4605d46Fd0B3f8329d936a8b258D69276cBa264\", \"0x89eE76cC25Fcbf1714ed575FAa6A10202B71c26A\", \"0xDb68Df0e86Bc7C6176E6a2255a5365f51113BCe8\", \"0x876295342f2CdA8d83e05f395063efA676535c43\", \"0x929167191ca41a4753eda357bb6e5ad6f15fb89b\", \"0x68289CEfA695b96C61506B590aC18Ce71989B0D0\", \"0xc36cF0cFcb5d905B8B513860dB0CFE63F6Cf9F5c\", \"0xb80fBF6cdb49c33dC6aE4cA11aF8Ac47b0b4C0f3\"]\n    let erc721s = [\"0x1DB61FC42a843baD4D91A2D788789ea4055B8613\", \"0x7C40c393DC0f283F318791d746d894DdD3693572\", \"0x31385d3520bCED94f77AaE104b406994D8F2168C\", \"0xC2C747E0F7004F9E8817Db2ca4997657a7746928\", \"0x892555E75350E11f2058d086C72b9C94C9493d72\", \"0x05f02507c7134Dbae420AB8C0Ef56E999B59dA03\", \"0xbC17cd7f1A58bdA5d6181618090813B3050416b5\", \"0xF87E31492Faf9A91B02Ee0dEAAd50d51d56D5d4d\", \"0x2216d47494E516d8206B70FCa8585820eD3C4946\", \"0x09B9905A472Aa1D387c9C1D8D956afF5463837E8\", \"0xdbD4264248e2f814838702E0CB3015AC3a7157a1\"]\n    return erc1155s.includes(fromNft)\n}","import types from '../constants';\nimport Web3 from 'web3';\nimport { isInputERC1155, isEthBasedMarket, getErc20FromNft, getMarketId, getExchangeId, getABI, getNftAddress, getErc20Address, getMarketAddress } from '../../utils/helper';\nconst web3 = new Web3(window.web3.currentProvider)\n\nconst CAS = \"0x95470F8E330d20788e76e8Da3063C9a19555aC0C\"\n\nconst getBuySignature = (market, toNft, toIds, toAmounts) => { \n    switch (market) {\n        case 'nft20':\n            return {\n                \"sig\": [\n                    \n                ],\n                \"params\": [\n\n                ]\n            }\n        case 'axie':\n            return {\n                \"sig\": [\n                    'address[]',\n                    'uint256[]'\n                ],\n                \"params\": [\n                    [toNft],\n                    toIds\n                ]\n            }\n        case 'cryptokitty':\n            return {\n                \"sig\": [\n                    'uint256[]'                    \n                ],\n                \"params\": [\n                    toIds\n                ]\n            }\n        case 'cryptopunk':\n            return {\n                \"sig\": [\n                    'uint256[]'\n                ],\n                \"params\": [\n                    toIds\n                ]\n            }\n        case 'decentraland':\n            return {\n                \"sig\": [\n                    'address[]',\n                    'uint256[]'\n                ],\n                \"params\": [\n                    [toNft],\n                    toIds\n                ]\n            }\n        case 'eulerbeats':\n            return {\n                \"sig\": [\n                    'uint256[]'\n                ],\n                \"params\": [\n                    toIds\n                ]\n            }\n        case 'knownorigin':\n            return {\n                \"sig\": [\n                    'uint256[]'\n                ],\n                \"params\": [\n                    toIds\n                ]\n            }\n        case 'mooncats':\n            return {\n                \"sig\": [\n                    'bytes5[]'\n                ],\n                \"params\": [\n                    toIds\n                ]\n            }\n        case 'superrare':\n            return {\n                \"sig\": [\n                    'uint256[]'\n                ],\n                \"params\": [\n                    toIds\n                ]\n            }\n        case 'defiville':\n            return {\n                \"sig\": [\n                    'uint256[]',\n                    'uint256[]'\n                ],\n                \"params\": [\n                    toIds,\n                    toAmounts\n                ]\n            }\n        case 'rarible':\n            return {\n                \"sig\": [\n                    \n                ],\n                \"params\": [\n\n                ]\n            }\n        case 'makersplace':\n            return {\n                \"sig\": [\n                    \n                ],\n                \"params\": [\n\n                ]\n            }\n        case 'uniqueone':\n            return {\n                \"sig\": [\n                    \n                ],\n                \"params\": [\n\n                ]\n            }\n        case 'opensea':\n            return {\n                \"sig\": [\n                    \n                ],\n                \"params\": [\n\n                ]\n            }\n        case 'asyncart':\n            return {\n                \"sig\": [\n                    'uint256[]'\n                ],\n                \"params\": [\n                    toIds\n                ]\n            }\n    }\n}\n\nconst getBuyMethod = (buyMarket) => { \n    return isEthBasedMarket(buyMarket) ? 'buyAssetsForEth' : 'buyAssetsForErc20';\n}\n\nconst getTotalPriceEstimate = async (buyMarket, buyData) => { \n    const market = new web3.eth.Contract(getABI(\"market\"), getMarketAddress(buyMarket))\n    return isEthBasedMarket(buyMarket)    \n    ? await market.methods.estimateBatchAssetPriceInEth(buyData).call()\n    : await market.methods.estimateBatchAssetPriceInErc20(buyData).call()\n}\n\nconst getSwapParameters = async (buyMarket, sellMarket, fromNft, buyData) => { \n    if (isEthBasedMarket(buyMarket)) {\n        return [getErc20FromNft(fromNft), CAS, \"0x\"+parseInt(await getTotalPriceEstimate(buyMarket, buyData)).toString(16)]\n    }\n    else {\n        var estimateDetails = await getTotalPriceEstimate(buyMarket, buyData);\n        var totalEstimate = 0;\n        for (var i = 0; i < estimateDetails[0]; i++) {\n            totalEstimate += estimateDetails[0][i]\n        }\n        return [getErc20FromNft(fromNft), getErc20Address(sellMarket), CAS, \"0x\"+totalEstimate.toString(16)]\n    }\n}\n\n\nvar generateSellDetails = (isInputERC1155, sellParameters) => {\n    var sellParams;\n    if (isInputERC1155) {\n        sellParams = web3.eth.abi.encodeParameters(\n            [\n                'address',\n                'uint256[]',\n                'uint256[]'\n            ],\n            sellParameters\n        );\n    }\n    else {\n        sellParams = web3.eth.abi.encodeParameters(\n            [\n                'address',\n                'uint256[]'\n            ],\n            sellParameters\n        );\n    }\n\n    return web3.eth.abi.encodeFunctionCall({\n        name: isInputERC1155 ? 'sellERC1155BatchForERC20Equivalent' : 'sellERC721ForERC20Equivalent',\n        type: 'function',\n        inputs: [{\n            type: 'bytes',\n            name: 'data'\n        }]\n    }, [sellParams]);\n}\n\nvar generateSwapDetails = (swapToETH, swapParameters) => {\n    if (swapToETH) {\n        return web3.eth.abi.encodeFunctionCall({\n            name: 'swapERC20ForExactETH',\n            type: 'function',\n            inputs: [\n                {\n                    type: 'address',\n                    name: 'from'\n                },\n                {\n                    type: 'address',\n                    name: 'recipient'\n                },\n                {\n                    type: 'uint256',\n                    name: 'amountOut'\n                }\n            ]\n        }, swapParameters);   \n    }\n    else {\n        return web3.eth.abi.encodeFunctionCall({\n            name: 'swapERC20ForExactERC20',\n            type: 'function',\n            inputs: [\n                {\n                    type: 'address',\n                    name: 'from'\n                },\n                {\n                    type: 'address',\n                    name: 'to'\n                },\n                {\n                    type: 'address',\n                    name: 'recipient'\n                },\n                {\n                    type: 'uint256',\n                    name: 'amountOut'\n                }\n            ]\n        }, swapParameters);   \n    }\n}\n\nvar generateEstimateData = (buyMarket, toNft, toIds, toAmounts) => { \n    var details = getBuySignature(buyMarket, toNft, toIds, toAmounts)\n    return web3.eth.abi.encodeParameters(\n        details.sig,\n        details.params\n    );\n}\n\nvar generateBuyDetails = (buyMarket, toNft, toIds, toAmounts, recipient) => { \n    var details = getBuySignature(buyMarket, toNft, toIds, toAmounts)\n    let buyParams = web3.eth.abi.encodeParameters(\n        details.sig,\n        details.params\n    );\n\n    return web3.eth.abi.encodeFunctionCall({\n        name: getBuyMethod(buyMarket),\n        type: 'function',\n        inputs: [\n            {\n                type: 'bytes',\n                name: 'data'\n            },\n            {\n                type: 'address',\n                name: 'recipient'\n            }\n        ]\n    }, [buyParams, recipient]);\n}\n\n/* export const executeFromEthTrade = (payload) => async (dispatch) => { \n    var { recipient, toNft, toIds, toAmounts, swapExchange, buyMarket } = payload\n    toIds = toIds.split(\",\").map(i => parseInt(i))\n    toAmounts = toAmounts.split(\",\").map(i => parseInt(i))\n    \n    var buyData = generateBuyDetails(buyMarket, toNft, toIds, toAmounts, recipient)\n    var swapData = []\n    let addrs = [changeIn, uniswapExchange, recipient]\n    \n    if (!isEthBasedMarket(buyMarket)) {\n        swapData = generateSwapDetails(isEthBasedMarket(buyMarket), await getSwapParameters(buyMarket, sellMarket, fromNft, generateEstimateData(buyMarket, toNft, toIds, toAmounts)))\n    }\n\n} */\n\n\nexport const executeFromNftTrade = (payload) => async (dispatch) => { \n    var { recipient, fromNft, fromIds, fromAmounts, changeIn, sellMarket } = payload\n    var ETH = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE'\n    var changeIn = changeIn || ETH;    \n    fromIds = fromIds.split(\",\").map(i => parseInt(i))\n    fromAmounts = fromAmounts.split(\",\").map(i => parseInt(i))\n    var uniswapExchange = '0xb5C70AC5147eF7DbB060382F7A5C724C2bEF070d'\n    var isFromERC1155 = isInputERC1155(fromNft)\n    var sellData = generateSellDetails(isFromERC1155, isFromERC1155 ? [fromNft, fromIds, fromAmounts] : [fromNft, fromIds])\n    let addrs = [changeIn, uniswapExchange, recipient]\n    var buyData = []\n\n    let data = web3.eth.abi.encodeParameters(\n        [\n            {\n                \"SellDetails[]\": {\n            \n                    \"marketId\": 'uint256',\n                    \"sellData\": 'bytes'\n                }\n            },\n            {\n                \"SwapDetails[]\": {\n                    \"exchangeId\": 'uint256',\n                    \"swapData\": 'bytes'\n                }\n            },\n            {\n                \"BuyDetails[]\": {\n                    \"marketId\": 'uint256',\n                    \"buyData\": 'bytes'\n            }\n            },\n            'address[]'\n        ],\n        [\n        [\n            {\n                \"marketId\": getMarketId(sellMarket),\n                \"sellData\": sellData\n            }\n        ],\n        [],\n        [],\n            addrs\n        ]\n    );\n    \n    var nft = new web3.eth.Contract(getABI(\"nft\"), fromNft)\n    console.log(data)\n    var tx = isFromERC1155\n        ? await nft.methods.safeBatchTransferFrom(recipient, CAS, fromIds, fromAmounts, data).send({ 'from': web3.givenProvider.selectedAddress })\n        : await nft.methods.safeTransferFrom(recipient, CAS, fromIds[0], data).send({ 'from': web3.givenProvider.selectedAddress })\n    console.log(tx)\n    dispatch({\n        type: types.TRADE,\n        payload: tx,\n    });\n}\n\nexport const executeTrade = (payload) => async (dispatch) => {\n    var { recipient, fromNft, fromIds, fromAmounts, toNft, toIds, toAmounts, sellMarket, swapExchange, buyMarket } = payload\n    toIds = toIds.split(\",\").map(i => parseInt(i))\n    toAmounts = toAmounts.split(\",\").map(i => parseInt(i))\n    fromIds = fromIds.split(\",\").map(i => parseInt(i))\n    fromAmounts = fromAmounts.split(\",\").map(i => parseInt(i))\n\n    var ETH = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE'\n    var changeIn = changeIn || ETH;\n    var uniswapExchange = '0xb5C70AC5147eF7DbB060382F7A5C724C2bEF070d'\n    var isFromERC1155 = isInputERC1155(fromNft)\n\n    // var fromNft = '0xe4605d46Fd0B3f8329d936a8b258D69276cBa264'\n    // var fromIds = [1, 11, 27]\n    // var fromAmounts = [6, 4, 1]\n\n    // var toNft = '0xF5b0A3eFB8e8E4c201e2A935F110eAaF3FFEcb8d'\n    // var toIds = [212062] \n    var sellData = generateSellDetails(isFromERC1155, isFromERC1155 ? [fromNft, fromIds, fromAmounts] : [fromNft, fromIds])\n    var buyData = generateBuyDetails(buyMarket, toNft, toIds, toAmounts, recipient)\n    var swapData = generateSwapDetails(isEthBasedMarket(buyMarket), await getSwapParameters(buyMarket, sellMarket, fromNft, generateEstimateData(buyMarket, toNft, toIds, toAmounts)))\n    let addrs = [changeIn, uniswapExchange, recipient]\n\n    let data = web3.eth.abi.encodeParameters(\n        [\n            {\n                \"SellDetails[]\": {\n            \n                    \"marketId\": 'uint256',\n                    \"sellData\": 'bytes'\n                }\n            },\n            {\n                \"SwapDetails[]\": {\n                    \"exchangeId\": 'uint256',\n                    \"swapData\": 'bytes'\n                }\n            },\n            {\n                \"BuyDetails[]\": {\n                    \"marketId\": 'uint256',\n                    \"buyData\": 'bytes'\n            }\n            },\n            'address[]'\n        ],\n        [\n        [\n            {\n                \"marketId\": getMarketId(sellMarket),\n                \"sellData\": sellData\n            }\n        ],\n        [\n            {\n                \"exchangeId\": getExchangeId(swapExchange),\n                \"swapData\": swapData\n            }\n        ],\n        [\n            {\n                \"marketId\": getMarketId(buyMarket),\n                \"buyData\": buyData\n            }\n        ],\n            addrs\n        ]\n    );\n    \n    var nft = new web3.eth.Contract(getABI(\"nft\"), fromNft)\n    console.log(data)\n    var tx = isFromERC1155\n        ? await nft.methods.safeBatchTransferFrom(recipient, CAS, fromIds, fromAmounts, data).send({ 'from': web3.givenProvider.selectedAddress })\n        : await nft.methods.safeTransferFrom(recipient, CAS, fromIds[0], data).send({ 'from': web3.givenProvider.selectedAddress })\n    console.log(tx)\n    dispatch({\n        type: types.TRADE,\n        payload: tx,\n    });\n};\n","import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport Nav from \"../Nav\";\nimport { login } from \"../../redux/actions/login\";\nimport { executeTrade } from \"../../redux/actions/trade\";\n\nfunction Login(props) {\n  const { user, trx, login, executeTrade } = props;\n  console.log(\"ui: \", trx)\n  if (user == '') {\n    login();\n  }\n\n  return (\n    <Fragment>\n    <center>\n    <h3>🧠 Nerd Swap 🔀</h3>\n    <Nav />\n    {\n        (user == '')\n        ? (<p> 🚨 Login via Metamask 🚨 </p>)\n        : (<Fragment>\n                          <p><b>Current Account: </b>{user}</p>\n             <p style={{'color': 'red',  'fontWeight': 'bold'}}>\n            This is a test interface. Only use assets that you are willing to lose.\n        </p>\n        <table className=\"table\">\n          <tr>\n            <th>SELL</th>\n            <th>BUY</th>\n          </tr>\n          <tr>\n              <td>\n                <label forHtml=\"nftAddr\">Choose an NFT to sell:</label>\n                <select name=\"nfts\" id=\"fromNft\">\n                    <option value=\"0xC2C747E0F7004F9E8817Db2ca4997657a7746928\">HashMask</option>\n                    <option value=\"0x7C40c393DC0f283F318791d746d894DdD3693572\">Wrapped Moon Cats</option>\n                    <option value=\"0x31385d3520bCED94f77AaE104b406994D8F2168C\">GAN Punks</option>\n                    <option value=\"0x274E21d314A915d1504060d4351DdE05d4dC031e\">Aah</option>\n                    <option value=\"0xDb68Df0e86Bc7C6176E6a2255a5365f51113BCe8\">Rope</option>\n                    <option value=\"0x892555E75350E11f2058d086C72b9C94C9493d72\">Nifty Dudes</option>\n                    <option value=\"0xe4605d46Fd0B3f8329d936a8b258D69276cBa264\">Meme</option>\n                    <option value=\"0x1DB61FC42a843baD4D91A2D788789ea4055B8613\">Chubbies</option>\n                    <option value=\"0x7CdC0421469398e0F3aA8890693d86c840Ac8931\">Doki Doki</option>\n                    <option value=\"0x89eE76cC25Fcbf1714ed575FAa6A10202B71c26A\">Node Runners</option>\n                </select>\n              </td>\n              <td>\n                <label forHtml=\"nftAddr\">Choose an NFT to buy:</label>\n                <select name=\"nfts\" id=\"toNft\">\n                    <option value=\"axie_0xF5b0A3eFB8e8E4c201e2A935F110eAaF3FFEcb8d\">Axie</option>\n                    <option value=\"cryptokitty_\">Crypto Kitties</option>\n                    <option value=\"cryptopunk_\">Crypto Punks</option>\n                    {/* decentraland can have multiple addresses */}\n                    {/* <option value=\"decentraland_\">Land (Decentraland)</option> */}\n                    <option value=\"eulerbeats_\">EulerBeats</option>\n                    <option value=\"knownorigin_\">KnownOrigin</option>\n                    <option value=\"mooncats_\">Moon Cats</option>\n                    <option value=\"superrare_\">SuperRare</option>\n                    <option value=\"defiville_\">DeFiVille</option>\n                    <option value=\"asyncart_\">AsyncArt</option>\n                </select>\n              </td>\n          </tr>\n          <tr>\n              <td>\n                <label forHtml=\"nftAddr\">Tokens ids to sell (comma-separated) [add single id in case of ERC721]: </label>\n                <input type=\"text\" id=\"fromIds\" name=\"fromIds\" placeholder=\"1,2,3\" />\n              </td>\n              <td>\n                <label forHtml=\"nftAddr\">Tokens ids to buy (comma-separated):</label>\n                <input type=\"text\" id=\"toIds\" name=\"toIds\" placeholder=\"1,2,3\" />\n              </td>\n          </tr>\n          <tr>\n              <td>\n                <label forHtml=\"nftAddr\">Tokens amounts to sell (comma-separated):</label>\n                <input type=\"text\" id=\"fromAmounts\" name=\"fromAmounts\" placeholder=\"1,2,3\" />\n              </td>\n              <td>\n                <label forHtml=\"nftAddr\">Tokens amounts to buy (comma-separated):</label>\n                <input type=\"text\" id=\"toAmounts\" name=\"toAmounts\" placeholder=\"1,2,3\" />\n              </td>\n          </tr>\n        </table>\n        <h4>Trade Path</h4>\n        <p>\n            {'NFT ---> NFT20 ---> '} \n            Uniswap [ERC20 to ETH]\n            {' ---> NFT '} \n        </p>         \n        <button\n            onClick={\n                () => {\n                    var fromNft = document.getElementById(\"fromNft\").value;\n                    var fromIds = document.getElementById(\"fromIds\").value;\n                    var fromAmounts = document.getElementById(\"fromAmounts\").value;\n                    var toNft = document.getElementById(\"toNft\").value;\n                    var toIds = document.getElementById(\"toIds\").value;\n                    var toAmounts = document.getElementById(\"toAmounts\").value;\n\n                    executeTrade(\n                        {\n                            'recipient': user,\n                            'fromNft': fromNft,\n                            'fromIds': fromIds,\n                            'fromAmounts': fromAmounts,\n                            'toNft': toNft.split(\"_\")[1],\n                            'toIds': toIds,\n                            'toAmounts': toAmounts,\n                            'sellMarket': 'nft20',\n                            'swapExchange': 'uniswap',\n                            'buyMarket': toNft.split(\"_\")[0]\n                        }\n                    )\n                }\n            }\n        >Execute Trade</button>\n        \n                          <br />\n                          <br />\n                          \n        {\n            (trx.transactionHash \n                ? <font color=\"blue\"><b>Transaction Submitted to ETH Mainnet: \n                    <a href={\"https://etherscan.io/tx/\"+trx.transactionHash} target=\"_blank\">{trx.transactionHash}</a>               \n                    </b></font>\n                : null)\n        }\n        \n        </Fragment> \n        )\n    }\n    </center>\n    <hr/>\n    </Fragment>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n    user: state.app.user,\n    trx: state.app.trx\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    login: () => dispatch(login()),\n    executeTrade: (payload) => dispatch(executeTrade(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React, { Fragment } from \"react\";\nimport Nav from \"../Nav\";\n\nfunction Home() {\n  return (\n      <Fragment>\n        <center>\n        <h3>🔀 Swap Gallery | Markets 🖼️</h3>\n        <Nav />\n        <h3>Supported Markets</h3>\n        <table className=\"table\">\n          <tr>\n            <th>Market</th>\n            <th>Type</th>\n            <th>Status</th>\n            <th>Address</th>\n            <th>MarketId</th>  \n          </tr>\n          <tr>\n            <td>NFT20</td>\n            <td>BUY/SELL</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0x064C9c5Fe72ab6acdc0d220050d519AfAa59B9bB\">0x064C9c5Fe72ab6acdc0d220050d519AfAa59B9bB</a></td>\n            <td>0</td>\n          </tr>\n          <tr>\n            <td>AxieInfinity</td>\n            <td>BUY</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0xdCAEE44ED2965d5615a9A206f6f3ab8fb90Fcd62\">0xdCAEE44ED2965d5615a9A206f6f3ab8fb90Fcd62</a></td>\n            <td>1</td>\n          </tr>\n          <tr>\n            <td>CryptoKitties</td>\n            <td>BUY</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0x7207d099EBAb7cF9DE49A29739Dd0C628dDCf48D\">0x7207d099EBAb7cF9DE49A29739Dd0C628dDCf48D</a></td>\n            <td>2</td>\n          </tr>\n          <tr>\n            <td>CryptoPunks</td>\n            <td>BUY</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0x03DcA7d783175Ba9D97cc41D20e4c266C7abb881\">0x03DcA7d783175Ba9D97cc41D20e4c266C7abb881</a></td>\n            <td>3</td>\n          </tr>\n          <tr>\n            <td>Decentraland</td>\n            <td>BUY</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0x0545405a2c208d3E2c50c71cF0B6B9a72A021b49\">0x0545405a2c208d3E2c50c71cF0B6B9a72A021b49</a></td>\n            <td>4</td>\n          </tr>\n          <tr>\n            <td>EulerBeats</td>\n            <td>BUY</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0x2428aE09b453692A667b8A8dee1Fc4082f44Ad05\">0x2428aE09b453692A667b8A8dee1Fc4082f44Ad05</a></td>\n            <td>5</td>\n          </tr>\n          <tr>\n            <td>KnownOrigin</td>\n            <td>BUY</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0xCBc360534370F1d5465e531236027f0610E067bf\">0xCBc360534370F1d5465e531236027f0610E067bf</a></td>\n            <td>6</td>\n          </tr>\n          <tr>\n            <td>MoonCatsMarket</td>\n            <td>BUY</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0xdAD871D701Da0D98993Eaa27Ce9c2e51D8912B87\">0xdAD871D701Da0D98993Eaa27Ce9c2e51D8912B87</a></td>\n            <td>7</td>\n          </tr>\n          <tr>\n            <td>SuperRare</td>\n            <td>BUY</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0x99f2B1FF838dA5Ee5062358b4Fa2c763C93Fe474\">0x99f2B1FF838dA5Ee5062358b4Fa2c763C93Fe474</a></td>\n            <td>8</td>\n          </tr>\n          <tr>\n            <td>DeFiVille</td>\n            <td>BUY</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0xE43C045bb9BC0793b384B3517239937b4eD7746C\">0xE43C045bb9BC0793b384B3517239937b4eD7746C</a></td>\n            <td>9</td>\n          </tr>\n          <tr>\n            <td>Rarible</td>\n            <td>BUY</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0xa695C98cfD621FF2a50233eFE9Eed5D5bde1Fc78\">0xa695C98cfD621FF2a50233eFE9Eed5D5bde1Fc78</a></td>\n            <td>10</td>\n          </tr>\n          <tr>\n            <td>MakersPlace</td>\n            <td>BUY</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0xc4B3a11f29971e757b1627586fa8C5fFE7bCC660\">0xc4B3a11f29971e757b1627586fa8C5fFE7bCC660</a></td>\n            <td>11</td>\n          </tr>\n          <tr>\n            <td>UniqueOne</td>\n            <td>BUY</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0xf28CdFB8d7De08A4C51C7D2171122ccDaAE37DaF\">0xf28CdFB8d7De08A4C51C7D2171122ccDaAE37DaF</a></td>\n            <td>12</td>\n          </tr>\n          <tr>\n            <td>OpenSea</td>\n            <td>BUY</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0xB32EaF1153a0f0b12361f0A9563B0178e98935E4\">0xB32EaF1153a0f0b12361f0A9563B0178e98935E4</a></td>\n            <td>13</td>\n          </tr>\n          <tr>\n            <td>AsyncArt</td>\n            <td>BUY</td>\n            <td className=\"active\">ACTIVE</td>\n            <td><a href=\"https://etherscan.io/address/0x827839e1cd15ec75a1adcea0d1dcc49d3f3c8cd0\">0x827839e1cd15ec75a1adcea0d1dcc49d3f3c8cd0</a></td>\n            <td>14</td>\n          </tr>\n          <tr>\n            <td>NFTX</td>\n            <td>BUY/SELL</td>\n            <td>wait till v2</td>\n            <td>X</td>\n            <td>X</td>\n          </tr>\n          <tr>\n            <td>Apymon</td>\n            <td>BUY</td>\n            <td className=\"wip\">WIP</td>\n            <td>X</td>\n            <td>X</td>\n          </tr>\n          <tr>\n            <td>Synther</td>\n            <td>BUY/SELL</td>\n            <td className=\"wip\">WIP</td>\n            <td>X</td>\n            <td>X</td>\n          </tr>\n          <tr>\n            <td>Drops</td>\n            <td>BUY/SELL</td>\n            <td className=\"wip\">WIP</td>\n            <td>X</td>\n            <td>X</td>\n          </tr>\n          <tr>\n            <td>0xProject</td>\n            <td>BUY/SELL</td>\n            <td className=\"help\">HELP</td>\n            <td>X</td>\n            <td>X</td>\n          </tr>\n          <tr>\n            <td>Sorare</td>\n            <td>BUY</td>\n            <td className=\"help\">HELP</td>\n            <td>X</td>\n            <td>X</td>\n          </tr>\n          <tr>\n            <td>SandboxGame</td>\n            <td>BUY</td>\n            <td className=\"wip\">WIP</td>\n            <td>X</td>\n            <td>X</td>\n          </tr>\n        </table>\n    </center>\n    <hr />\n    </Fragment>\n  );\n}\n\nexport default Home;\n","import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { login } from \"../../redux/actions/login\";\nimport { executeFromNftTrade } from \"../../redux/actions/trade\";\n\nfunction EthSwap(props) {\n  const { user, trx, login, executeFromNftTrade } = props;\n\n  if (user == '') {\n    login();\n  }\n\n  return (\n    <Fragment>\n    <center>\n    <h3>🧠 Nerd Swap 🔀</h3>\n            <hr />\n        <p>\n          <Link to=\"/\">Markets</Link> {' | '}\n          <a target=\"_blank\" href=\"https://github.com/vasa-develop/cross-asset-swap\">GitHub</a>\n        </p>\n        <hr />\n    {\n        (user == '')\n        ? (<p> 🚨 Login via Metamask 🚨 </p>)\n        : (<Fragment>\n                          <p><b>Current Account: </b>{user}</p>\n             <p style={{'color': 'red',  'fontWeight': 'bold'}}>\n            This is a test interface. Only use assets that you are willing to lose.\n        </p>\n        <table className=\"table\">\n          <tr>\n            <th>SELL</th>\n            <th>BUY</th>\n          </tr>\n          <tr>\n              <td>\n                <label forHtml=\"nftAddr\">Choose an NFT to sell:</label>\n                <select name=\"nfts\" id=\"fromNft\">\n                    <option value=\"0xC2C747E0F7004F9E8817Db2ca4997657a7746928\">HashMask</option>\n                    <option value=\"0x7C40c393DC0f283F318791d746d894DdD3693572\">Wrapped Moon Cats</option>\n                    <option value=\"0x31385d3520bCED94f77AaE104b406994D8F2168C\">GAN Punks</option>\n                    <option value=\"0x274E21d314A915d1504060d4351DdE05d4dC031e\">Aah</option>\n                    <option value=\"0xDb68Df0e86Bc7C6176E6a2255a5365f51113BCe8\">Rope</option>\n                    <option value=\"0x892555E75350E11f2058d086C72b9C94C9493d72\">Nifty Dudes</option>\n                    <option value=\"0xe4605d46Fd0B3f8329d936a8b258D69276cBa264\">Meme</option>\n                    <option value=\"0x1DB61FC42a843baD4D91A2D788789ea4055B8613\">Chubbies</option>\n                    <option value=\"0x7CdC0421469398e0F3aA8890693d86c840Ac8931\">Doki Doki</option>\n                    <option value=\"0x89eE76cC25Fcbf1714ed575FAa6A10202B71c26A\">Node Runners</option>\n                    <option value=\"0xF87E31492Faf9A91B02Ee0dEAAd50d51d56D5d4d\">Decentraland</option>\n                    <option value=\"0xbC17cd7f1A58bdA5d6181618090813B3050416b5\">FRAMERGENCE</option>\n                    <option value=\"0x05f02507c7134Dbae420AB8C0Ef56E999B59dA03\">EDITIONAL</option>\n                    <option value=\"0x876295342f2CdA8d83e05f395063efA676535c43\">LEGENDS OF CRYPTONIA</option>\n                    <option value=\"0x2216d47494E516d8206B70FCa8585820eD3C4946\">NFT20 WAIFUS</option>\n                    <option value=\"0x09B9905A472Aa1D387c9C1D8D956afF5463837E8\">APE ISLAND S1</option>                    \n                    <option value=\"0x929167191ca41a4753eda357bb6e5ad6f15fb89b\">TRISM ORIGINALS</option>\n                    <option value=\"0x68289CEfA695b96C61506B590aC18Ce71989B0D0\">DEGENARTS</option>\n                    <option value=\"0xdbD4264248e2f814838702E0CB3015AC3a7157a1\">TRADE SQUAD</option>\n                    <option value=\"0xc36cF0cFcb5d905B8B513860dB0CFE63F6Cf9F5c\">GALA GAMES</option>\n                    <option value=\"0xb80fBF6cdb49c33dC6aE4cA11aF8Ac47b0b4C0f3\">BLOCK ART</option>                    \n                </select>\n              </td>\n              <td>\n                <label forHtml=\"nftAddr\">Paste address of desired ERC20 (leave the input blank if you want ETH):</label>\n                <br />\n                <input id=\"changeIn\" name=\"changeIn\" type=\"text\" placeholder=\"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\" />\n              </td>\n          </tr>\n          <tr>\n              <td>\n                <label forHtml=\"nftAddr\">Tokens ids to sell (comma-separated) <b>[add single id in case of ERC721]:</b></label>\n                <br />\n                <input type=\"text\" id=\"fromIds\" name=\"fromIds\" placeholder=\"1,2,3\" />\n              </td>\n              <td>\n              </td>\n          </tr>\n          <tr>\n              <td>\n                <label forHtml=\"nftAddr\">Tokens amounts to sell (comma-separated):</label>\n                <br />\n                <input type=\"text\" id=\"fromAmounts\" name=\"fromAmounts\" placeholder=\"1,2,3\" />\n              </td>\n              <td>\n              </td>\n          </tr>\n        </table>\n        <h4>Trade Path</h4>\n        <p>\n            {'NFT ---> NFT20 ---> '} \n            Uniswap [ERC20 to ETH/ERC20]\n        </p>         \n        <button\n            onClick={\n                () => {\n                    var fromNft = document.getElementById(\"fromNft\").value;\n                    var fromIds = document.getElementById(\"fromIds\").value;\n                    var fromAmounts = document.getElementById(\"fromAmounts\").value;\n                    var changeIn = document.getElementById(\"changeIn\").value;\n\n                    executeFromNftTrade(\n                        {\n                            'recipient': user,\n                            'fromNft': fromNft,\n                            'fromIds': fromIds,\n                            'fromAmounts': fromAmounts,\n                            'changeIn': changeIn,\n                            'sellMarket': 'nft20',\n                            'swapExchange': 'uniswap'\n                        }\n                    )\n                }\n            }\n        >Execute Trade</button>\n        \n                          <br />\n                          <br />\n                          \n        {\n            (trx.transactionHash \n                ? <font color=\"blue\"><b>Transaction Submitted to ETH Mainnet: \n                    <a href={\"https://etherscan.io/tx/\"+trx.transactionHash} target=\"_blank\">{trx.transactionHash}</a>               \n                    </b></font>\n                : null)\n        }\n        \n        </Fragment> \n        )\n    }\n    </center>\n    <hr/>\n    </Fragment>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n    user: state.app.user,\n    trx: state.app.trx\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    login: () => dispatch(login()),\n    executeFromNftTrade: (payload) => dispatch(executeFromNftTrade(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EthSwap);","import React from \"react\";\n\nexport default function Footer() {\n  return (\n    <div>\n      <h3>Built with ❤️ by <a href=\"https://twitter.com/vasa_develop\" target=\"_blank\">vasa</a></h3>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport Store from \"./redux/store\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport NerdSwap from \"./components/NerdSwap\";\nimport Home from \"./components/Home\";\nimport EthSwap from \"./components/EthSwap\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n    <center className=\"App\">\n      <Provider store={Store}>\n        <Router>\n          <Switch>\n            <Route path=\"/nerd-swap\">\n              <NerdSwap />\n            </Route>\n            <Route path=\"/eth-swap\">\n              <EthSwap />\n            </Route>\n            <Route path=\"\">\n              <Home />\n            </Route>\n          </Switch>\n        </Router>\n        <div>\n          <Footer />\n        </div>\n      </Provider>\n    </center>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}